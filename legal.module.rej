***************
*** 1,44 ****
  <?php
  
  /**
-  * Implementation of hook_help().
   */
  function legal_help($path, $arg) {
    $output = '';
    switch ($path) {
      case 'admin/help#legal':
-       $output .= t('Display a Terms & Conditions statement on the registration page, require visitor to accept T&C to register. 
- 										When a user creates an account they are required to accept your Terms & Conditions to complete their registration.');
        break;
-     case 'admin/settings/legal':
-       $output .= t('Display a Terms & Conditions statement on the registration page, require visitor to accept the T&C to register. 
- 										A <a href="@page">page</a> displaying your T&C will be automatically created, access to this page can be set via the <a href="@access">permissions</a> administration page.', 
- 										array('@page' => url('legal'), '@access' => url('admin/user/permissions')));
    }
    return $output;
  }
  
  /**
-  * Implementation of hook_perm().
   */
- function legal_perm() {
-   return array('administer Terms and Conditions', 'view Terms and Conditions');
  }
  
  /**
-  * Implementation of hook_access().
   */
  function legal_access($op, $node, $account) {
    return ($op == 'view' && (user_access('view Terms and Conditions') || user_access('administer Terms and Conditions')));
  }
  
  /**
-  * Implementation of hook_menu().
   */
  function legal_menu() {
    $items = array();
  
-   $items['admin/settings/legal'] = array(
      'title' => 'Legal',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('legal_administration'),
--- 1,48 ----
  <?php
  
  /**
+  * Implements hook_help().
   */
  function legal_help($path, $arg) {
    $output = '';
    switch ($path) {
      case 'admin/help#legal':
+       $output .= t('Display a Terms & Conditions statement on the registration page, require visitor to accept T&C to register. When a user creates an account they are required to accept your Terms & Conditions to complete their registration.');
        break;
+     case 'admin/config/people/legal':
+       $output .= t('Display a Terms & Conditions statement on the registration page, require visitor to accept the T&C to register. A <a href="@page">page</a> displaying your T&C will be automatically created, access to this page can be set via the <a href="@access">permissions</a> administration page.', array('@page' => url('legal'), '@access' => url('admin/user/permissions')));
    }
    return $output;
  }
  
  /**
+  * Implements hook_perm().
   */
+ function legal_permission() {
+   return array(
+     'administer Terms and Conditions' => array(
+       'title' => t('Administer Terms and Conditions'),
+     ),
+     'view Terms and Conditions' => array(
+       'title' => t('View Terms and Conditions'),
+     ),
+   );
  }
  
  /**
+  * Implements hook_access().
   */
  function legal_access($op, $node, $account) {
    return ($op == 'view' && (user_access('view Terms and Conditions') || user_access('administer Terms and Conditions')));
  }
  
  /**
+  * Implements hook_menu().
   */
  function legal_menu() {
    $items = array();
  
+   $items['admin/config/people/legal'] = array(
      'title' => 'Legal',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('legal_administration'),
***************
*** 47,71 ****
      'file' => 'legal.admin.inc',
    );
  
- 	$items['admin/settings/legal/terms'] = array(
- 	  'title' => 'Add T&C',
- 	  'access arguments' => array('administer Terms and Conditions'),
- 	  'description' => 'Display Terms and Conditions statement on the registration page.',
- 	  'type' => MENU_DEFAULT_LOCAL_TASK, 
- 	);
- 	
- 	$items['admin/settings/legal/languages'] = array(
- 	  'title' => 'Languages',
- 	  'page callback' => 'drupal_get_form',
- 	  'page arguments' => array('legal_languages'),
- 		'access callback' => 'legal_languages_access',
- 	  'access arguments' => array('administer Terms and Conditions'),
- 	  'description' => 'Display Terms and Conditions statement on the registration page.',
- 	    'weight' => 10, 
- 		'type' => MENU_LOCAL_TASK,
- 	  'file' => 'legal.admin.inc',
- 	); 
- 	
    $items['legal'] = array(
      'title' => 'Terms and Conditions',
      'page callback' => 'legal_page',
--- 51,75 ----
      'file' => 'legal.admin.inc',
    );
  
+   $items['admin/config/people/legal/terms'] = array(
+     'title' => 'Add T&C',
+     'access arguments' => array('administer Terms and Conditions'),
+     'description' => 'Display Terms and Conditions statement on the registration page.',
+     'type' => MENU_DEFAULT_LOCAL_TASK, 
+   );
+   
+   $items['admin/config/people/legal/languages'] = array(
+     'title' => 'Languages',
+     'page callback' => 'drupal_get_form',
+     'page arguments' => array('legal_languages'),
+     'access callback' => 'legal_languages_access',
+     'access arguments' => array('administer Terms and Conditions'),
+     'description' => 'Display Terms and Conditions statement on the registration page.',
+       'weight' => 10, 
+     'type' => MENU_LOCAL_TASK,
+     'file' => 'legal.admin.inc',
+   ); 
+   
    $items['legal'] = array(
      'title' => 'Terms and Conditions',
      'page callback' => 'legal_page',
***************
*** 139,151 ****
      case 1: // scroll box (CSS)
      case 2: // HTML
        $form['legal']['conditions'] = array(
-         '#value' => filter_xss_admin($conditions['conditions']),
        );
        break;
  
      case 3: // Page Link
        $form['legal']['conditions'] = array(
-         '#value' => ' ',
        );
        $accept_label = t('<strong>Accept</strong> <a href="@terms">Terms & Conditions</a> of Use', array('@terms' => url('legal')));
        break;
--- 143,155 ----
      case 1: // scroll box (CSS)
      case 2: // HTML
        $form['legal']['conditions'] = array(
+         '#markup' => filter_xss_admin($conditions['conditions']),
        );
        break;
  
      case 3: // Page Link
        $form['legal']['conditions'] = array(
+         '#markup' => '',
        );
        $accept_label = t('<strong>Accept</strong> <a href="@terms">Terms & Conditions</a> of Use', array('@terms' => url('legal')));
        break;
***************
*** 187,487 ****
    return $form;
  }
  
- function theme_legal_display($form) {
-   if (!empty($form['legal']['conditions']['#value'])) {
      // Scroll box (CSS).
      if ($form['display']['#value'] == 1) {
        $path = base_path() . drupal_get_path('module', 'legal');
        drupal_add_css(drupal_get_path('module', 'legal') .'/legal.css');
-       $form['legal']['conditions']['#prefix' ] = '<div class="legal-terms">';
-       $form['legal']['conditions']['#suffix' ] = '</div>';
      }
-     return $form;
    }
  }
  
- function theme_legal_page($form) {
    if (!empty($form['current_id']['#value'])) {
-     $form = theme('legal_display', $form);
      return drupal_render($form);
    }
  }
  
  /**
-  * Implementation of hook_user().
   */
- function legal_user($op, &$edit, &$account, $category = FALSE) {
    global $user;
    global $language;
  
-   switch ($op) {
-     case 'register':
-       $conditions = legal_get_conditions($language->language);
  
-       // Do nothing if there's no Terms and Conditions text set.
-       if (empty($conditions['conditions'])) {
-         return;
-       }
  
-       $form_fields = legal_display_fields($conditions);
- 
-       // Disable checkbox if:
-       //  - user is already registered (administer users);
-       //  - users with 'administer users' can access registration on admin/user/user/create.
-       if (!empty($user->uid)) {
-         $form_fields['legal']['legal_accept']['#attributes'] = array('disabled' => 'disabled');
-         $form_fields['legal']['legal_accept']['#required'] = FALSE;
-         
- 				if (is_array($conditions['extras'])) {
- 	        foreach ($conditions['extras'] as $key => $label) {
- 	          if (!empty($label)) {
- 	            $form_fields['legal'][$key]['#attributes'] = array('disabled' => 'disabled');
- 	            $form_fields['legal'][$key]['#required'] = FALSE;
- 	          }
- 	        } 
- 				}
-       }
-       else {
-         $form_fields['legal']['legal_accept']['#default_value'] = $edit['legal_accept'];
-       }
  
-       $form = theme('legal_display', $form_fields);
-       return $form;
- 
-     case 'login':
- 	    if ($user->uid == 1) {
- 	      break;
- 	    }  
- 
-       // get last accepted version for this account
-     	$legal_account = legal_get_accept($user->uid);
- 
- 			// if no version has been accepted yet, get version with current language revision
- 			if (empty($legal_account['version'])) {
- 				$conditions = legal_get_conditions($language->language);
- 	      // no conditions set yet
- 				if (empty($conditions['conditions'])) return;	
- 			}
- 			else { // get version / revision of last accepted language
- 
- 				$conditions = legal_get_conditions($legal_account['language']);
- 				// no conditions set yet 
- 	      if (empty($conditions['conditions'])) return;
- 	
-         // Check latest version of T&C has been accepted.
-         $accepted = legal_version_check($user->uid, $conditions['version'], $conditions['revision'], $legal_account);
- 
- 				if ($accepted) {
- 					return;
- 				}
- 			}
- 
-       $uid = $user->uid;
- 
-       // Destroy the current session.
-       session_destroy();
- 			session_set_save_handler('sess_open', 'sess_close', 'sess_read', 'sess_write', 'sess_destroy_sid', 'sess_gc');
-       module_invoke_all('user', 'logout', NULL, $user);
- 
-       // We have to use $GLOBALS to unset a global variable.
-       $user = user_load(array('uid' => 0));
- 
- 			$query = NULL;
-       // deal with destination from password reset one time login link
- 			if (arg(0) == 'user' && arg(1) == 'reset') {
- 				$query = array('destination' => "user/$uid/edit");
- 			}
- 			
- 			if (!empty($_REQUEST['destination'])) {
- 				$query = array('destination' => $_REQUEST['destination']);
- 			}
- 
-       unset($_REQUEST['destination']);
- 
-       $signatory = db_fetch_object(db_query_range('SELECT * FROM {users} WHERE uid = %d', $uid, 0, 1));
- 
-       drupal_goto('legal_accept/' . $signatory->uid . '/' . md5($signatory->name . $signatory->pass . $signatory->login), $query);
-       break;
  
-     case 'form':
- 
-       if ($category != 'account') return;
- 	
-       // get last accepted version for this account
-       $legal_account = legal_get_accept($account->uid);
- 
- 			// if no version has been accepted yet, get version with current language revision
- 			if (empty($legal_account['version'])) {
- 				$conditions = legal_get_conditions($language->language);
- 	      // no conditions set yet
- 				if (empty($conditions['conditions'])) return;	
- 			}
- 			else { // get version / revision of last accepted language
- 
- 				$conditions = legal_get_conditions($legal_account['language']);
- 				// no conditions set yet 
- 	      if (empty($conditions['conditions'])) return;
- 	
-         // Check latest version of T&C has been accepted.
-         $accepted = legal_version_check($account->uid, $conditions['version'], $conditions['revision'], $legal_account);
- 
- 				// enable language switching if version accepted and revision up to date
- 				if ($accepted && $legal_account['language'] != $language->language) {
- 					$conditions = legal_get_conditions($language->language);
- 				}
- 			}
- 
-        $form_fields = legal_display_fields($conditions);
- 
-        if ($accepted === TRUE) {
-          $form_fields['legal']['legal_accept']['#value'] = 1;
-          if (!empty($conditions['extras'])) {
-            foreach ($conditions['extras'] as $key => $label) {
-              if (!empty($label)) {
-                $form_fields['legal'][$key]['#value'] = 1;
-              }
-            }
-          }
         }
  
-        // Disable checkbox if:
-        //  - user is not account owner;
-        //  - latest T&C has already been accepted.
-        if ($account->uid != $user->uid || $accepted  == TRUE) {
-          $form_fields['legal']['legal_accept']['#attributes'] = array('disabled' => 'disabled');
-          if (!empty($conditions['extras'])) {
-            reset($conditions['extras']);
-            foreach ($conditions['extras'] as $key => $label) {
-              if (!empty($label)) {
-                $form_fields['legal'][$key]['#attributes'] = array('disabled' => 'disabled');
-              }
-            }
-          }
         }
  
-        // Not required if user is not account owner.
-        if ($account->uid != $user->uid) {
-          $form_fields['legal']['legal_accept']['#required'] = FALSE;
-          if (!empty($conditions['extras'])) {
-            reset($conditions['extras']);
-            foreach ($conditions['extras'] as $key => $label) {
-              if (!empty($label)) {
-                $form_fields['legal'][$key]['#required'] = FALSE;
-              }
-            }
-          }
         }
  
-        // Enable account owner to accept.
-        if ($account->uid == $user->uid && $accepted != TRUE) {
-          $form_fields['legal']['legal_accept']['#default_value'] = isset($edit['legal_accept']) ? $edit['legal_accept'] : '';
-          $form_fields['legal']['legal_accept']['#required'] = TRUE;
- 
-          if (!empty($conditions['extras'])) {
-            reset($conditions['extras']);
- 
-            foreach ($conditions['extras'] as $key => $label) {
-              if (!empty($label)) {
-                $form_fields['legal'][$key]['#default_value'] = isset($edit[$key]) ? $edit[$key] : '';
-                $form_fields['legal'][$key]['#required'] = TRUE;
-              }
-            }
-          }
         }
  
-        $form = theme('legal_display', $form_fields);
-        return $form;
  
-       break;
  
-     case 'insert':
-       $conditions = legal_get_conditions($language->language);
  
-       if (empty($conditions['conditions'])) {
-         return;
-       }
  
-       // Record the accepted state before removing legal_accept from $edit.
-       $accepted = $edit['legal_accept'];
-       $edit['legal_accept'] = NULL;
-       $edit['conditions'] = NULL;
  
-       foreach ($conditions['extras'] as $key => $label) {
-         $edit[$key] = NULL;
-       }
  
-       // Don't insert if user is already registered (administrator).
-       if (!empty($user->uid)) {
-         break;
-       }
  
-       if ($accepted) {
-         legal_save_accept($conditions['version'], $conditions['revision'], $conditions['language'], $account->uid);
-       }
-       break;
  
-     case 'update':
-       $conditions = legal_get_conditions($language->language);
-       if (empty($conditions['conditions'])) {
-         return;
-       }
  
-       // Record the accepted state before removing legal_accept from $edit.
-       $accepted = $edit['legal_accept'];
-       $edit['legal_accept'] = NULL;
-       $edit['conditions'] = NULL;
  
-       foreach ($conditions['extras'] as $key => $label) {
-         $edit[$key] = NULL;
-       }
  
-       if ($account->uid != $user->uid) {
-         break;
-       }
  
-       // If already accepted skip data entry.
-       $previously_accepted = legal_version_check($account->uid, $conditions['version'], $conditions['revision']);
  
-       if ($previously_accepted === TRUE) {
-         break;
-       }
  
-       if ($accepted) {
-         legal_save_accept($conditions['version'], $conditions['revision'], $conditions['language'], $account->uid);
-       }
-       break;
    }
  }
  
  /**
   * Require registered users to accept new T&C.
   */
- function legal_login($constructor, $uid, $id_hash = NULL) {
    global $language;
  
- 	// get last accepted version for this account
- 	$legal_account = legal_get_accept($uid);
- 
- 	// if no version has been accepted yet, get version with current language revision
- 	if (empty($legal_account['version'])) {
- 		$conditions = legal_get_conditions($language->language);
- 	  // no conditions set yet
- 		if (empty($conditions['conditions'])) return;	
- 	}
- 	else { // get version / revision of last accepted language
- 
- 		$conditions = legal_get_conditions($legal_account['language']);
- 		// no conditions set yet 
- 	  if (empty($conditions['conditions'])) return;
- 
- 	  // Check latest version of T&C has been accepted.
- 	  $accepted = legal_version_check($uid, $conditions['version'], $conditions['revision'], $legal_account);
- 
- 		if ($accepted) {
- 			return;
- 		}
- 	}
- 	
    $form = legal_display_fields($conditions);
  
    $form['uid'] = array(
--- 191,524 ----
    return $form;
  }
  
+ function theme_legal_display($variables) {
+   $form = $variables['form'];
+ 
+   if (!empty($form['legal']['conditions']['#markup'])) {
      // Scroll box (CSS).
      if ($form['display']['#value'] == 1) {
        $path = base_path() . drupal_get_path('module', 'legal');
        drupal_add_css(drupal_get_path('module', 'legal') .'/legal.css');
+       $form['legal']['conditions']['#prefix'] = '<div class="legal-terms">';
+       $form['legal']['conditions']['#suffix'] = '</div>';
      }
    }
+ 
+   return $form;
  }
  
+ function theme_legal_page($variables) {
+   $form = $variables['form'];
+ 
    if (!empty($form['current_id']['#value'])) {
+     $form = theme('legal_display', array('form' => $form));
      return drupal_render($form);
    }
  }
  
  /**
+  * Implements hook_form_FORM_ID_alter().
   */
+ function legal_form_user_register_form_alter(&$form, &$form_state) {
    global $user;
    global $language;
  
+   $conditions = legal_get_conditions($language->language);
  
+   // Do nothing if there's no Terms and Conditions text set.
+   if (empty($conditions['conditions'])) {
+     return;
+   }
  
+   $form = array_merge($form, legal_display_fields($conditions));
  
+   // Disable checkbox if:
+   //  - user is already registered (administer users);
+   //  - users with 'administer users' can access registration on admin/user/user/create.
+   if (!empty($user->uid)) {
+     $form['legal']['legal_accept']['#attributes'] = array('disabled' => 'disabled');
+     $form['legal']['legal_accept']['#required'] = FALSE;
+     
+     if (is_array($conditions['extras'])) {
+       foreach ($conditions['extras'] as $key => $label) {
+         if (!empty($label)) {
+           $form['legal'][$key]['#attributes'] = array('disabled' => 'disabled');
+           $form['legal'][$key]['#required'] = FALSE;
+         }
+       } 
+     }
+   }
+ 
+   return theme('legal_display', array('form' => $form));
+ }
+ 
+ /**
+  * Implements hook_form_FORM_ID_alter().
+  */
+ function legal_form_user_profile_form_alter(&$form, $form_state) {
+   global $user;
+   global $language;
+ 
+   if ($form['#user_category'] != 'account') {
+     return;
+   }
  
+   $account = $form['#user'];
+ 
+   // Get last accepted version for this account.
+   $legal_account = legal_get_accept($account->uid);
+ 
+   // If no version has been accepted yet, get version with current language revision.
+   if (empty($legal_account['version'])) {
+     $conditions = legal_get_conditions($language->language);
+     // No conditions set yet.
+     if (empty($conditions['conditions'])) return;  
+   }
+   // Get version / revision of last accepted language.
+   else {
+ 
+     $conditions = legal_get_conditions($legal_account['language']);
+     // No conditions set yet.
+     if (empty($conditions['conditions'])) return;
+ 
+     // Check latest version of T&C has been accepted.
+     $accepted = legal_version_check($account->uid, $conditions['version'], $conditions['revision'], $legal_account);
+ 
+     // Enable language switching if version accepted and revision up to date.
+     if ($accepted && $legal_account['language'] != $language->language) {
+       $conditions = legal_get_conditions($language->language);
+     }
+   }
+ 
+   $form = array_merge($form, legal_display_fields($conditions));
+ 
+   if ($accepted === TRUE) {
+    $form['legal']['legal_accept']['#value'] = 1;
+    if (!empty($conditions['extras'])) {
+      foreach ($conditions['extras'] as $key => $label) {
+        if (!empty($label)) {
+          $form['legal'][$key]['#value'] = 1;
         }
+      }
+    }
+   }
  
+   // Disable checkbox if:
+   //  - user is not account owner;
+   //  - latest T&C has already been accepted.
+   if ($account->uid != $user->uid || $accepted  == TRUE) {
+    $form['legal']['legal_accept']['#attributes'] = array('disabled' => 'disabled');
+    if (!empty($conditions['extras'])) {
+      reset($conditions['extras']);
+      foreach ($conditions['extras'] as $key => $label) {
+        if (!empty($label)) {
+          $form['legal'][$key]['#attributes'] = array('disabled' => 'disabled');
         }
+      }
+    }
+   }
  
+   // Not required if user is not account owner.
+   if ($account->uid != $user->uid) {
+    $form['legal']['legal_accept']['#required'] = FALSE;
+    if (!empty($conditions['extras'])) {
+      reset($conditions['extras']);
+      foreach ($conditions['extras'] as $key => $label) {
+        if (!empty($label)) {
+          $form['legal'][$key]['#required'] = FALSE;
         }
+      }
+    }
+   }
+ 
+   // Enable account owner to accept.
+   if ($account->uid == $user->uid && $accepted != TRUE) {
+    $form['legal']['legal_accept']['#default_value'] = isset($edit['legal_accept']) ? $edit['legal_accept'] : '';
+    $form['legal']['legal_accept']['#required'] = TRUE;
+ 
+    if (!empty($conditions['extras'])) {
+      reset($conditions['extras']);
  
+      foreach ($conditions['extras'] as $key => $label) {
+        if (!empty($label)) {
+          $form['legal'][$key]['#default_value'] = isset($edit[$key]) ? $edit[$key] : '';
+          $form['legal'][$key]['#required'] = TRUE;
         }
+      }
+    }
+   }
  
+   return theme('legal_display', array('form' => $form));
+ }
  
+ /**
+  * Implements hook_user_login().
+  */
+ function legal_user_login(&$edit, $account) {
+   global $user;
+   global $language;
  
+   if ($user->uid == 1) {
+     return;
+   }
  
+   // Get last accepted version for this account.
+   $legal_account = legal_get_accept($user->uid);
  
+   // If no version has been accepted yet, get version with current language revision.
+   if (empty($legal_account['version'])) {
+     $conditions = legal_get_conditions($language->language);
+     // No conditions set yet.
+     if (empty($conditions['conditions'])) {
+       return;
+     }
+   }
+   // Get version / revision of last accepted language.
+   else {
+     $conditions = legal_get_conditions($legal_account['language']);
+     // No conditions set yet.
+     if (empty($conditions['conditions'])) {
+       return;
+     }
  
+     // Check latest version of T&C has been accepted.
+     $accepted = legal_version_check($user->uid, $conditions['version'], $conditions['revision'], $legal_account);
  
+     if ($accepted) {
+       return;
+     }
+   }
  
+   $uid = $user->uid;
  
+   // Destroy the current session.
+   module_invoke_all('user_logout', $user);
+   session_destroy();
  
+   // We have to use $GLOBALS to unset a global variable.
+   $user = drupal_anonymous_user();
  
+   $query = NULL;
+   // Deal with destination from password reset one time login link.
+   if (arg(0) == 'user' && arg(1) == 'reset') {
+     $query = array('destination' => "user/$uid/edit");
+   }
+   
+   if (!empty($_REQUEST['destination'])) {
+     $query = array('destination' => $_REQUEST['destination']);
+   }
  
+   unset($_GET['destination']);
  
+   $result = db_select('users', 'u')
+     ->fields('u')
+     ->condition('uid', $uid)
+     ->range(0, 1)
+     ->execute()
+     ->fetchAllAssoc('uid');
+   $signatory = array_pop($result);
  
+   drupal_goto('legal_accept/' . $signatory->uid . '/' . md5($signatory->name . $signatory->pass . $signatory->login), array('query' => $query));
+ }
  
+ /**
+  * Implementation of hook_user_insert().
+  */
+ function legal_user_insert(&$edit, $account, $category) {
+   global $user;
+   global $language;
+ 
+   $conditions = legal_get_conditions($language->language);
+ 
+   if (empty($conditions['conditions'])) {
+     return;
+   }
+ 
+   // Record the accepted state before removing legal_accept from $edit.
+   $accepted = $edit['legal_accept'];
+   $edit['legal_accept'] = NULL;
+   $edit['conditions'] = NULL;
+ 
+   foreach ($conditions['extras'] as $key => $label) {
+     $edit[$key] = NULL;
+   }
+ 
+   // Don't insert if user is already registered (administrator).
+   if (!empty($user->uid)) {
+     return;
+   }
+ 
+   if ($accepted) {
+     legal_save_accept($conditions['version'], $conditions['revision'], $conditions['language'], $account->uid);
+   }
+ }
+ 
+ /**
+  * Implements hook_user_update().
+  */
+ function legal_user_update(&$edit, $account, $category) {
+   global $user;
+   global $language;
+ 
+   $conditions = legal_get_conditions($language->language);
+   if (empty($conditions['conditions'])) {
+     return;
+   }
+ 
+   // Record the accepted state before removing legal_accept from $edit.
+   $accepted = $edit['legal_accept'];
+   $edit['legal_accept'] = NULL;
+   $edit['conditions'] = NULL;
+ 
+   foreach ($conditions['extras'] as $key => $label) {
+     $edit[$key] = NULL;
+   }
+ 
+   if ($account->uid != $user->uid) {
+     return;
+   }
+ 
+   // If already accepted skip data entry.
+   $previously_accepted = legal_version_check($account->uid, $conditions['version'], $conditions['revision']);
+ 
+   if ($previously_accepted === TRUE) {
+     return;
+   }
+ 
+   if ($accepted) {
+     legal_save_accept($conditions['version'], $conditions['revision'], $conditions['language'], $account->uid);
    }
  }
  
  /**
   * Require registered users to accept new T&C.
   */
+ function legal_login($form, $constructor, $uid, $id_hash = NULL) {
    global $language;
  
+   // get last accepted version for this account
+   $legal_account = legal_get_accept($uid);
+ 
+   // if no version has been accepted yet, get version with current language revision
+   if (empty($legal_account['version'])) {
+     $conditions = legal_get_conditions($language->language);
+     // no conditions set yet
+     if (empty($conditions['conditions'])) return;  
+   }
+   else { // get version / revision of last accepted language
+ 
+     $conditions = legal_get_conditions($legal_account['language']);
+     // no conditions set yet 
+     if (empty($conditions['conditions'])) return;
+ 
+     // Check latest version of T&C has been accepted.
+     $accepted = legal_version_check($uid, $conditions['version'], $conditions['revision'], $legal_account);
+ 
+     if ($accepted) {
+       return;
+     }
+   }
+   
    $form = legal_display_fields($conditions);
  
    $form['uid'] = array(
***************
*** 516,528 ****
  
    $form = legal_display_changes($form, $uid);
  
- 	$redirect = 'user/'. $uid;
- 	
- 	if (!empty($_GET['destination'])) {
- 		$redirect = $_GET['destination']; 
- 	}
  
- 	$form['#redirect'] = $redirect;
  
    $form['save'] = array(
      '#type' => 'submit',
--- 553,565 ----
  
    $form = legal_display_changes($form, $uid);
  
+   $redirect = 'user/'. $uid;
+   
+   if (!empty($_GET['destination'])) {
+     $redirect = $_GET['destination']; 
+   }
  
+   $form['#redirect'] = $redirect;
  
    $form['save'] = array(
      '#type' => 'submit',
***************
*** 552,565 ****
  
  function legal_login_submit($form, &$form_state) {
    global $user;
- 	$values = $form_state['values'];
    $user = user_load(array('uid' => $values['uid']));
  
    legal_save_accept($values['version'], $values['revision'], $values['language'], $user->uid);
    watchdog('legal', '%name accepted T&C version %tc_id.', array('%name' => $user->name, '%tc_id' => $values['tc_id']));
  
    // Update the user table timestamp noting user has logged in.
-   db_query("UPDATE {users} SET login = '%d' WHERE uid = '%s'", time(), $user->uid);
  
    // User has new permissions, so we clear their menu cache.
    cache_clear_all($user->uid, 'cache_menu', TRUE);
--- 594,610 ----
  
  function legal_login_submit($form, &$form_state) {
    global $user;
+   $values = $form_state['values'];
    $user = user_load(array('uid' => $values['uid']));
  
    legal_save_accept($values['version'], $values['revision'], $values['language'], $user->uid);
    watchdog('legal', '%name accepted T&C version %tc_id.', array('%name' => $user->name, '%tc_id' => $values['tc_id']));
  
    // Update the user table timestamp noting user has logged in.
+   db_update('users', 'u')
+     ->values(array('login' => time()))
+     ->condition('uid', $user->uid)
+     ->execute();
  
    // User has new permissions, so we clear their menu cache.
    cache_clear_all($user->uid, 'cache_menu', TRUE);
***************
*** 586,627 ****
    }
  
    $save = drupal_render($form['save']);
-   $output .= drupal_render($form);
    $output .= $save;
  
    return $output;
  }
  
  function legal_get_accept($uid) {
- 	$keys = array('legal_id', 'version', 'revision', 'language', 'uid', 'accepted');
-   $result = db_fetch_array(db_query_range("SELECT * FROM {legal_accepted} WHERE uid = %d ORDER BY version DESC, revision DESC", $uid, 0, 1));
  
- 	foreach ($keys as $key) {
- 		$accept[$key] = $result[$key]; 
- 	}
- 	
    return $accept;
  }
  
  function legal_save_accept($version, $revision, $language, $uid) {
-   db_query("INSERT INTO {legal_accepted} (version, revision, language, uid, accepted) VALUES (%d, %d, '%s', %d, %d)", $version, $revision, $language, $uid, time());
  }
  
  function legal_get_conditions($language = NULL) {
- 	$keys = array('tc_id', 'version', 'revision', 'language', 'conditions', 'date', 'extras', 'changes');
   
- 	if (!empty($language)) {
-     $args[] = $language;
- 		$result = db_fetch_array(db_query_range("SELECT * FROM {legal_conditions} WHERE language = '%s' ORDER BY version DESC, revision DESC", $args, 0, 1));	
- 	}
- 	else {
- 		$result = db_fetch_array(db_query_range("SELECT * FROM {legal_conditions} ORDER BY tc_id DESC", 0, 1));	
- 	}
- 
- 	foreach ($keys as $key) {
- 		$conditions[$key] = isset($result[$key]) ? $result[$key] : '';
- 	}
- 	
    $conditions['extras'] = empty($conditions['extras']) ? array() : unserialize($conditions['extras']);
    return $conditions;
  }
--- 632,703 ----
    }
  
    $save = drupal_render($form['save']);
+   $output .= drupal_render_children($form);
    $output .= $save;
  
    return $output;
  }
  
  function legal_get_accept($uid) {
+   $keys = array('legal_id', 'version', 'revision', 'language', 'uid', 'accepted');
+   $result = db_select('legal_accepted', 'la')
+     ->fields('la')
+     ->condition('uid', $uid)
+     ->orderBy('version', 'DESC')
+     ->orderBy('revision', 'DESC')
+     ->execute()
+     ->fetchAllAssoc('legal_id');
+   $result = count($result) ? array_shift($result) : array();
+ 
+   $accept = array();
+   foreach ($keys as $key) {
+     if (isset($result->$key)) {
+       $accept[$key] = $result->$key;
+     }
+   }
  
    return $accept;
  }
  
  function legal_save_accept($version, $revision, $language, $uid) {
+   db_insert('legal_accepted')
+     ->fields(array(
+       'version' => $version,
+       'revision' => $revision,
+       'language' => $language,
+       'uid' => $uid,
+       'accepted' => time(),
+     ))
+     ->execute();
  }
  
  function legal_get_conditions($language = NULL) {
+   $keys = array('tc_id', 'version', 'revision', 'language', 'conditions', 'date', 'extras', 'changes');
   
+   if (!empty($language)) {
+     $result = db_select('legal_conditions', 'lc')
+       ->fields('lc')
+       ->condition('language', $language)
+       ->orderBy('version', 'DESC')
+       ->orderBy('revision', 'DESC')
+       ->range(0, 1)
+       ->execute()
+       ->fetchAllAssoc('tc_id');
+     $result = (array) array_shift($result);
+   }
+   else {
+     $result = db_select('legal_conditions', 'lc')
+       ->fields('lc')
+       ->orderBy('tc_id', 'DESC')
+       ->execute()
+       ->fetchAllAssoc('tc_id');
+     $result = (array) array_shift($result);
+   }
+ 
+   foreach ($keys as $key) {
+     $conditions[$key] = isset($result[$key]) ? $result[$key] : '';
+   }
+   
    $conditions['extras'] = empty($conditions['extras']) ? array() : unserialize($conditions['extras']);
    return $conditions;
  }
***************
*** 630,658 ****
   * Get all changes since user last accepted.
   */
  function legal_display_changes($form, $uid) {
- 	$is_list = FALSE;
- 	$bullet_points = array();
    $last_accepted = legal_get_accept($uid);
  
    if (empty($last_accepted)) {
      return $form;
    }
  
-   $result = db_query("SELECT changes FROM {legal_conditions} 
- 												WHERE ((version > %d) OR (version = %d AND revision > %d)) AND language = '%s' 
- 												ORDER BY revision ASC, version ASC", $last_accepted['version'], $last_accepted['version'], $last_accepted['revision'], $last_accepted['language']);
  
    if (empty($result)) {
      return $form;
    }
  
- 	while ($term = db_fetch_object($result)) {
  
      $changes = filter_xss_admin($term->changes);
  
- 		if (!empty($changes)) {
- 			$bullet_points = array_merge($bullet_points, explode("\r\n", $changes));
- 		}
    }
  
    if (empty($bullet_points)) {
--- 706,745 ----
   * Get all changes since user last accepted.
   */
  function legal_display_changes($form, $uid) {
+   $is_list = FALSE;
+   $bullet_points = array();
    $last_accepted = legal_get_accept($uid);
  
    if (empty($last_accepted)) {
      return $form;
    }
  
+   $result = db_select('legal_conditions', 'lc')
+     ->fields('lc', array('changes'))
+     ->condition(db_or()
+         ->condition('version', $last_accepted['version'], '>')
+         ->condition(db_and()
+           ->condition('version', $last_accepted['version'])
+           ->condition('revision', $last_accepted['revision'], '>')
+         )
+       )
+     ->condition('language', $last_accepted['language'])
+     ->orderBy('revision', 'ASC')
+     ->orderBy('version', 'ASC')
+     ->execute()
+     ->fetchAllAssoc('lc_id');
  
    if (empty($result)) {
      return $form;
    }
  
+   foreach ($result as $term) {
  
      $changes = filter_xss_admin($term->changes);
  
+     if (!empty($changes)) {
+       $bullet_points = array_merge($bullet_points, explode("\r\n", $changes));
+     }
    }
  
    if (empty($bullet_points)) {
***************
*** 668,676 ****
      '#tree' => TRUE,
    );
  
- 	$form['changes']['bullet_points'] = array(
- 	  '#value' => theme('item_list', $bullet_points),
- 	);
  
    return $form;
  }
--- 755,763 ----
      '#tree' => TRUE,
    );
  
+   $form['changes']['bullet_points'] = array(
+     '#markup' => theme('item_list', array('items' => $bullet_points)),
+   );
  
    return $form;
  }
***************
*** 683,693 ****
    if (empty($legal_account)) $legal_account = legal_get_accept($uid);
  
    if ($legal_account['version'] == $version && $legal_account['revision'] == $revision) {
- 		$accepted = TRUE;
- 	} 
- 	else {
- 		$accepted = FALSE;
- 	} 
  
    return $accepted;
  }
--- 770,780 ----
    if (empty($legal_account)) $legal_account = legal_get_accept($uid);
  
    if ($legal_account['version'] == $version && $legal_account['revision'] == $revision) {
+     $accepted = TRUE;
+   } 
+   else {
+     $accepted = FALSE;
+   } 
  
    return $accepted;
  }
***************
*** 699,716 ****
  function legal_languages_access($perm) {
  
    if (!module_exists('locale')) {
- 		return FALSE;
- 	}
- 	
- 	if (!user_access($perm)) {
- 		return FALSE; 
- 	}
- 	
- 	return TRUE;
  }
  
  /**
-  * Implementation of hook_views_api().
   */
  function legal_views_api() {
    return array(
--- 786,803 ----
  function legal_languages_access($perm) {
  
    if (!module_exists('locale')) {
+     return FALSE;
+   }
+   
+   if (!user_access($perm)) {
+     return FALSE; 
+   }
+   
+   return TRUE;
  }
  
  /**
+  * Implements hook_views_api().
   */
  function legal_views_api() {
    return array(
