<?php
// $Id$

/**
 * Implementation of hook_help().
 */
function legal_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#legal':
      $output .= t('Display a Terms & Conditions statement on the registration page, require visitor to accept T&C to register.');
      $output .= t('When a user creates an account they are required to accept your Terms & Conditions to complete their registration.');
      break;
    case 'admin/settings/legal':
      $output .= t('Display a Terms & Conditions statement on the registration page, require visitor to accept the T&C to register. ');
      $output .= t("A !page displaying your T&C will be automatically created, access to this page can be set via the !access administration page.", array('!page' => l('page', 'legal'), '!access' => l('permissions', 'admin/user/permissions')));
  }
  return $output;
}

/**
 * Implementation of hook_perm().
 */
function legal_perm() {
  return array('administer Terms and Conditions', 'view Terms and Conditions');
}

/**
 * Implementation of hook_access().
 */
function legal_access($op, $node, $account) {
  return ($op == 'view' && (user_access('view Terms and Conditions') || user_access('administer Terms and Conditions')));
}

/**
 * Implementation of hook_menu().
 */
function legal_menu() {
  $items = array();
  $items['admin/settings/legal'] = array(
    'title' => 'Legal',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('legal_administration'),
    'access arguments' => array('administer Terms and Conditions'),
    'description' => 'Display Terms and Conditions statement on the registration page.',
    'file' => 'legal.admin.inc',
  );
  $items['legal'] = array(
    'title' => 'Terms and Conditions',
    'page callback' => 'legal_page',
    'access arguments' => array('view Terms and Conditions'),
    'type' => MENU_CALLBACK,
    'file' => 'legal.pages.inc',
  );
  $items['legal_accept/%/%'] = array(
    'title' => 'Terms and Conditions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('legal_login', 1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function legal_theme() {
  return array(
    'legal_administration' => array('arguments' => array('form' => NULL)),
    'legal_display' => array('arguments' => array('form' => NULL)),
    'legal_page' => array('arguments' => array('form' => NULL)),
    'legal_login' => array('arguments' => array('form' => NULL)),
  );
}

function legal_display_fields($conditions) {
  $form = array();

  $accept_label = t('<strong>Accept</strong> Terms & Conditions of Use');

  $form['current_id'] = array(
    '#type' => 'value',
    '#value' => $conditions['tc_id'],
  );

  $form['current_date'] = array(
    '#type' => 'value',
    '#value' => $conditions['date'],
  );

  $form['display'] = array(
    '#type' => 'value',
    '#value' => variable_get('legal_display', '0'),
  );

  $form['legal'] = array(
    '#type' => 'fieldset',
    '#title' => t('Terms and Conditions of Use'),
    '#weight' => 29,
  );

  switch (variable_get('legal_display', '0')) {
    case 1: // scroll box (CSS)
    case 2: // HTML
      $form['legal']['conditions'] = array(
        '#value' => filter_xss_admin($conditions['conditions']),
      );
      break;

    case 3: // Page Link
      $form['legal']['conditions'] = array(
        '#value' => ' ',
      );
      $accept_label = t('<strong>Accept</strong> !terms of Use', array('!terms' => l('Terms & Conditions', 'legal')));
      break;

    default: // scroll box (HTML)
      $form['legal']['conditions'] = array(
        '#type' => 'textarea',
        '#title' => t('Terms & Conditions'),
        '#default_value' => $conditions['conditions'],
        '#value' => $conditions['conditions'],
        '#rows' => 10,
        '#weight' => 0,
        '#attributes' => array('readonly' => 'readonly'),
      );
  }

  if (!empty($conditions['extras'])) {
    foreach ($conditions['extras'] as $key => $label) {
      if (!empty($label)) {
        $form['legal'][$key] = array(
          '#type' => 'checkbox',
          '#title' => filter_xss_admin($label),
          '#default_value' => 0,
          '#weight' => 2,
          '#required' => TRUE,
        );
      }
    }
  }

  $form['legal']['legal_accept'] = array(
    '#type' => 'checkbox',
    '#title' => $accept_label,
    '#default_value' => 0,
    '#weight' => 50,
    '#required' => TRUE,
  );

  return $form;
}

function theme_legal_display($form) {
  if (!empty($form['legal']['conditions']['#value'])) {
    // Scroll box (CSS).
    if ($form['display']['#value'] == 1) {
      $path = base_path() . drupal_get_path('module', 'legal');
      drupal_add_css(drupal_get_path('module', 'legal') .'/legal.css');
      $form['legal']['conditions']['#prefix' ] = '<div class="legal-terms">';
      $form['legal']['conditions']['#suffix' ] = '</div>';
    }
    return $form;
  }
}

function theme_legal_page($form) {
  if (!empty($form['current_id']['#value'])) {
    $form = theme('legal_display', $form);
    return drupal_render($form);
  }
}

function legal_user($op, &$edit, &$account, $category = FALSE) {

    global $user;
    
    switch ($op) {
        
      case 'register':
        
        $conditions = legal_get_conditions();
        if (empty($conditions['conditions'])) return;
        
        $form_fields = legal_display_fields($conditions);
        
        // disable checkbox if:
        // user is already registered (administer users)
				// users with 'administer users' can access registration on admin/user/user/create
        if (!empty($user->uid)) {
            $form_fields['legal']['legal_accept']['#attributes'] = array('disabled' => 'disabled');
            $form_fields['legal']['legal_accept']['#required'] = FALSE;
            
              
                reset($conditions['extras']);
                while (list ($key, $label) = each ($conditions['extras'])) {
                    if (!empty($label)) {
                        $form_fields['legal'][$key]['#attributes'] = array('disabled' => 'disabled');
                        $form_fields['legal'][$key]['#required'] = FALSE;
                    }
                }
           
            
        } else {
            $form_fields['legal']['legal_accept']['#default_value'] = $edit['legal_accept'];
        }
        
        $form = theme('legal_display', $form_fields);
        return $form;

      case 'login':

        $conditions = legal_get_conditions();
        if (empty($conditions['conditions'])) return;

        $accepted = legal_version_check($user->uid, $conditions['tc_id']);
        if ($accepted == TRUE || $user->uid == 1) break;

        $uid = $user->uid;

        // Destroy the current session:
        session_destroy();
        module_invoke_all('user', 'logout', NULL, $user);

        // We have to use $GLOBALS to unset a global variable:
        $user = user_load(array('uid' => 0));
        unset($_REQUEST['destination']);

        $signatory = db_fetch_object(db_query('SELECT * FROM {users} WHERE uid = %d LIMIT 1', $uid));

        drupal_goto('legal_accept/' . $signatory->uid . '/' . md5($signatory->name . $signatory->password . $signatory->login)); 
        break;  
        
      case 'form':
        
        $conditions = legal_get_conditions();
        if (empty($conditions['conditions'])) return;
        
        if ($category == 'account') {
    
            $form_fields = legal_display_fields($conditions);
            
            // check latest version of T&C has been accepted
            $accepted = legal_version_check($account->uid, $conditions['tc_id']);
            
            if ($accepted == TRUE) {
                $form_fields['legal']['legal_accept']['#value'] = 1;
                
                if (!empty($conditions['extras'])) {
                    while (list ($key, $label) = each ($conditions['extras'])) {
                        if (!empty($label)) {
                            $form_fields['legal'][$key]['#value'] = 1;
                        }
                    }
                }
            }
    
            // disable checkbox if:
            // user is not account owner
            // latest T&C has already been accepted
            if ($account->uid != $user->uid || $accepted  == TRUE) {
                $form_fields['legal']['legal_accept']['#attributes'] = array('disabled' => 'disabled');
                
                if (!empty($conditions['extras'])) {
                    reset($conditions['extras']);
                    while (list ($key, $label) = each ($conditions['extras'])) {
                        if (!empty($label)) {
                            $form_fields['legal'][$key]['#attributes'] = array('disabled' => 'disabled');
                        }
                    }
                }
            }
            
            // not required if user is not account owner
            if ($account->uid != $user->uid) {
                $form_fields['legal']['legal_accept']['#required'] = FALSE;
            
                if (!empty($conditions['extras'])) {
                    reset($conditions['extras']);
                    while (list ($key, $label) = each ($conditions['extras'])) {
                        if (!empty($label)) {
                            $form_fields['legal'][$key]['#required'] = FALSE;
                        }
                    }
                }            
            }

            // enable account owner to accept
            if ($account->uid == $user->uid && $accepted != TRUE) {
                $form_fields['legal']['legal_accept']['#default_value'] = $edit['legal_accept'];
                $form_fields['legal']['legal_accept']['#required'] = TRUE;
                
                if (!empty($conditions['extras'])) {
                    reset($conditions['extras']);
                    while (list ($key, $label) = each ($conditions['extras'])) {
                        if (!empty($label)) {
                            $form_fields['legal'][$key]['#default_value'] = $edit[$key];
                            $form_fields['legal'][$key]['#required'] = TRUE;
                        }
                    }
                } 
                
            }
            
            $form = theme('legal_display', $form_fields);
            return $form;
        }

        break;

    case 'insert':

        $conditions = legal_get_conditions();
        if (empty($conditions['conditions'])) return;

        $edit['legal_accept'] = NULL;

        $edit['conditions'] = NULL;

        foreach ($conditions['extras'] as $key => $label) {
          $edit[$key] = NULL;
        }

        // don't insert if user is already registered (administrator)
        if (!empty($user->uid)) break;

        legal_save_accept($account->uid, $conditions['tc_id']);
        break;  
       
    case 'update':
        
        $conditions = legal_get_conditions();
        if (empty($conditions['conditions'])) return;
        
        $edit['legal_accept'] = NULL;
        $edit['conditions'] = NULL;
        
        foreach ($conditions['extras'] as $key => $label) {
            $edit[$key] = NULL;
        }
        
        if ($account->uid != $user->uid) break;     
        
        // if already accepted skip data entry
        $accepted = legal_version_check($account->uid, $conditions['tc_id']);
        
        if ($accepted == TRUE) break;
        
        legal_save_accept($account->uid, $conditions['tc_id']);
        break;
        
    }
    
    return;
  }
  
// require registered users to accept new T&C  
function legal_login($constructor, $uid, $id_hash = NULL) {
	
	$conditions = legal_get_conditions();
	$form = legal_display_fields($conditions);

	$form['uid'] = array(
	    '#type' => 'value',
	    '#value' => $uid,
	);
	$form['id_hash'] = array(
	    '#type' => 'value',
	    '#value' => $id_hash,
	);
	$form['tc_id'] = array(
	    '#type' => 'value',
	    '#value' => $conditions['tc_id'],
	);

	$form = legal_display_changes($form, $uid);

	$form['save'] = array(
	    '#type' => 'submit',
	    '#value' => t('Confirm'),
	);

	return $form; 
}
  

function legal_login_validate($form, &$form_state) {
	$account = db_fetch_object( db_query('SELECT * FROM {users} WHERE uid = %d LIMIT 1', $form_state['values']['uid']) );
	$id_hash = md5($account->name . $account->password . $account->login);

	if ($id_hash != $form_state['values']['id_hash']) {
	  form_set_error('legal_accept', t('User ID cannot be identified.'));
	  drupal_goto();   
	}

	return; 
}

function legal_login_submit($form, &$form_state) {
      
    global $user;
    $user = user_load(array('uid' => $form_state['values']['uid']));

    legal_save_accept($user->uid, $form_state['values']['tc_id']);
    watchdog('legal', '%name accepted T&C version %tc_id.', array('%name' => $user->name, '%tc_id' => $form_state['values']['tc_id']));
    
    // Update the user table timestamp noting user has logged in.
    db_query("UPDATE {users} SET login = '%d' WHERE uid = '%s'", time(), $user->uid);
    
    // user has new permissions, so we clear their menu cache
    cache_clear_all($user->uid, 'cache_menu', TRUE);
    
    user_module_invoke('login', $edit, $user);
		$form_state['redirect'] = 'user/'. $user->uid; 
    return;
}

function theme_legal_login($form) {

    $form = theme('legal_display', $form);
    
    $output .= '<p>' . t('To continue to use this site please read the Terms & Conditions below, and complete the form to confirm your acceptance.' ) . '</p>';
    
    if ($form['changes']) {

        foreach (element_children($form['changes']) as $key) {
            $form['changes'][$key]['#prefix'] .= '<li>';
            $form['changes'][$key]['#suffix'] .= '</li>';
        }
            
        $form['changes']['start_list'] = array('#value' => '<ul>', '#weight' => 0);
        $form['changes']['end_list'] = array('#value' => '</ul>', '#weight' => 3);
        $output .= drupal_render($form['changes']);
    }

    $save = drupal_render($form['save']);
    $output .= drupal_render($form);
    $output .= $save;
    
    return $output;
}
  
function legal_get_accept($uid) {

    $accept = db_fetch_object(db_query("SELECT * FROM {legal_accepted} WHERE uid = '%d' ORDER BY legal_id DESC LIMIT 1", $uid));
    return $accept;
}


function legal_save_accept($uid, $tc_id) {

  db_query("INSERT INTO {legal_accepted} (legal_id, uid, tc_id, accepted) VALUES (NULL, '%d', '%d', '%d')", $uid, $tc_id, time());

  return;
}

function legal_get_conditions() {

    $conditions = db_fetch_array(db_query("SELECT * FROM {legal_conditions} ORDER BY tc_id DESC LIMIT 1"));
    $conditions['extras'] = empty($conditions['extras']) ? array() : unserialize($conditions['extras']);
    return $conditions;
}

function legal_conditions_updated($new) {

    $old = legal_get_conditions();
    if ($old['conditions'] != $new['conditions']) return TRUE;
    
    $count = count($new['extras']);
        
    for ($counter = 1; $counter <= $count; $counter++) {
    
        if ( $old['extras']['extras-' . $counter] != $new['extras']['extras-' . $counter] ) return TRUE;
    }
    
    return FALSE;    
}

// get all changes since user last accepted
function legal_display_changes($form, $uid) {
    
    $last_accepted = legal_get_accept($uid);
    if (empty($last_accepted)) return $form;
    
    $results = db_query("SELECT * FROM {legal_conditions} WHERE tc_id > %d ORDER BY tc_id DESC", $last_accepted->tc_id);
    
    if (empty($results)) return $form;
    
    $form['changes'] = array(
        '#type' => 'fieldset',
        '#title' => t('Changes List'),
        '#description' => t('Changes to the Terms & Conditions since last accepted:'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#tree' => TRUE,
    );
    
    while ($conditions = db_fetch_object($results)) { 
       
       unset($changes);
        
        if (!empty($conditions->changes)) {
        
            $changes = explode("\r\n", $conditions->changes);
            
            foreach($changes as $change) {
                $form['changes'][] = array(
                    '#value' => filter_xss_admin($change),
                    '#weight' => 2,
                );
                $is_list = TRUE;
            }
        }
        
    }
    
    if (!$is_list) $form['changes'] = NULL;

    return $form;
}

// check if user has accepted latest version of T&C
function legal_version_check($uid, $current_tc_id) {

    $legal_account = legal_get_accept($uid);
    if ($legal_account->tc_id == $current_tc_id) return TRUE;
    
    // get change log messages
    return $log_messages;
}
